// Generated by CoffeeScript 1.12.7
(function() {
  var AppView, LocationCollection, LocationModel, LocationView, app,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LocationModel = (function(superClass) {
    extend(LocationModel, superClass);

    function LocationModel() {
      return LocationModel.__super__.constructor.apply(this, arguments);
    }

    LocationModel.prototype.defaults = {
      name: "",
      temperature: "",
      description: ""
    };

    return LocationModel;

  })(Backbone.Model);

  LocationCollection = (function(superClass) {
    extend(LocationCollection, superClass);

    function LocationCollection() {
      return LocationCollection.__super__.constructor.apply(this, arguments);
    }

    LocationCollection.prototype.model = LocationModel;

    return LocationCollection;

  })(Backbone.Collection);

  LocationView = (function(superClass) {
    extend(LocationView, superClass);

    function LocationView() {
      return LocationView.__super__.constructor.apply(this, arguments);
    }

    LocationView.prototype.tagName = "li";

    LocationView.prototype.template = _.template(document.getElementById("cardTemplate").innerHTML);

    LocationView.prototype.events = {
      "click .edit": "editLocation",
      "click .remove": "removeLocation"
    };

    LocationView.prototype.initialize = function() {
      this.listenTo(this.model, "change", this.render);
      return this.listenTo(this.model, "destroy", this.remove);
    };

    LocationView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    LocationView.prototype.editLocation = function() {
      var newName, units;
      newName = prompt("Enter new name:", this.model.get("name"));
      if (newName) {
        this.model.set("name", newName.charAt(0).toUpperCase() + newName.slice(1));
        units = $("#units").val();
        return this.fetchWeather(newName, units);
      }
    };

    LocationView.prototype.removeLocation = function() {
      return this.model.destroy();
    };

    LocationView.prototype.fetchWeather = function(locationName, units) {
      var apiKey, apiUrl;
      apiKey = "e70ef23b1712076b76b6018202d93967";
      apiUrl = "https://api.openweathermap.org/data/2.5/weather?q=" + locationName + "&units=" + units + "&appid=" + apiKey;
      return $.getJSON(apiUrl, (function(_this) {
        return function(data) {
          var description, temperature;
          temperature = data.main.temp;
          description = data.weather[0].main;
          if (units === "metric") {
            _this.model.set("temperature", temperature + "\u00B0C");
          } else if (units === "imperial") {
            _this.model.set("temperature", temperature + "\u00B0F");
          } else {
            _this.model.set("temperature", temperature + "K");
          }
          return _this.model.set("description", description);
        };
      })(this));
    };

    return LocationView;

  })(Backbone.View);

  AppView = (function(superClass) {
    extend(AppView, superClass);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = "#app";

    AppView.prototype.events = {
      "click #add-location": "addLocation"
    };

    AppView.prototype.initialize = function() {
      this.locationCollection = new LocationCollection;
      return this.listenTo(this.locationCollection, "add", this.renderLocation);
    };

    AppView.prototype.addLocation = function() {
      var locationName, units;
      locationName = this.$("#location").val().trim();
      if (locationName) {
        units = this.$("#units").val();
        return this.fetchWeather(locationName, units);
      }
    };

    AppView.prototype.fetchWeather = function(locationName, units) {
      var apiKey, apiUrl;
      apiKey = "e70ef23b1712076b76b6018202d93967";
      apiUrl = "https://api.openweathermap.org/data/2.5/weather?q=" + locationName + "&units=" + units + "&appid=" + apiKey;
      return $.getJSON(apiUrl, (function(_this) {
        return function(data) {
          var description, temperature;
          temperature = data.main.temp;
          description = data.weather[0].main;
          if (units === "metric") {
            temperature = temperature + "\u00B0C";
          } else if (units === "imperial") {
            temperature = temperature + "\u00B0F";
          } else {
            temperature = temperature + "K";
          }
          return _this.locationCollection.add({
            name: locationName.charAt(0).toUpperCase() + locationName.slice(1),
            temperature: temperature,
            description: description
          });
        };
      })(this));
    };

    AppView.prototype.renderLocation = function(locationModel) {
      var locationView;
      locationView = new LocationView({
        model: locationModel
      });
      return this.$("#location-list").append(locationView.render().el);
    };

    return AppView;

  })(Backbone.View);

  app = new AppView;

}).call(this);
